CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program (reset==1) or continue executing (reset==0)

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    // a or c-type instruction?
    Not(in=instruction[15], out=aType);
    Or(a=instruction[12], b=false, out=cType);

    // Where to store
    And(a=instruction[5], b=instruction[15], out=writeA);
    And(a=instruction[4], b=instruction[15], out=writeD);
    And(a=instruction[3], b=instruction[15], out=writeM);

    // Logical conditions needed for the control logic
    Not(in=zr, out=jne);
    Not(in=jle, out=jgt);
    Or(a=zr, b=jgt, out=jge);
    Or(a=zr, b=ng, out=jle);

    // The actual control logic
    Mux4Way(a=false, b=jgt, c=zr, d=jge, sel=instruction[0..1], out=jumpIfaType);
    And(a=instruction[15], b=jumpIfaType, out=doJump);

    // The mux on the left of diagram 5.9
    Mux16(a=ALUout, b=instruction, sel=aType, out=Ain);

    // A register (could use plain register, but tests want it)
    Or(a=aType, b=writeA, out=loadA);
    ARegister(in=Ain, load=loadA, out=Aout, out[0..14]=addressM);

    // D register (could use plain register, but tests want it)
    DRegister(in=ALUout, load=writeD, out=registerD);

    // The mux on the right of diagram 5.9
    Mux16(a=Aout, b=inM, sel=cType, out=inputALU);

    // ALU
    ALU(x=registerD, y=inputALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=zr, ng=ng, out=ALUout);

    // Needed for feeding back as outputs of the CPU cannot be fed back
    Or16(a=false, b=ALUout, out=outM);

    // Program counter
    PC(in=Aout, load=doJump, inc=true, reset=reset, out[0..14]=pc);
}
